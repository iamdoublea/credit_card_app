# -*- coding: utf-8 -*-
"""ccapp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wLDEYltZu1oSXdu5H1TWh3uRAmUSvEH1
"""

!pip install scikit-learn

import sklearn


import pandas as pd
import streamlit as st
import pickle

import streamlit as st
import pandas as pd
import pickle

def main():
    st.title('Credit Card Approval Prediction')
    html_temp="""
    <div style="background-color:tomato;padding:10px">
    <h2 style="color:white;text-align:center;">Streamlit Credit Card Approval Predictor ML App </h2>

    """
    # to use html
    st.markdown(html_temp,unsafe_allow_html=True)

    # Load the trained model
    def load_model(model_file):
        with open(model_file, 'rb') as f:
            loaded_model = pickle.load(f)
        return loaded_model

    # Specify the correct file path for the trained model
    model_file = 'best_model_rf.pkl'  # Update this with the correct file path
    rf_model = load_model(model_file)

    # Create input fields for user to enter data
    gender = st.selectbox('Gender', ['Male', 'Female'], key='gender_input')
    car_owner = st.selectbox('Car Owner', ['Yes', 'No'], key='car_owner_input')
    annual_income = st.number_input('Annual Income', min_value=0, key='income_input')
    work_phone = st.selectbox('Work Phone', ['Yes', 'No'], key='work_phone_input')
    phone = st.selectbox('Phone', ['Yes', 'No'], key='phone_input')
    family_members = st.number_input('Family Members', min_value=0, key='family_input')
    age = st.number_input('Age', min_value=18, max_value=100, key='age_input')
    experience = st.number_input('Experience', min_value=0, key='experience_input')
    education = st.selectbox('Education', ['Lower Secondary', 'Secondary / Secondary Special', 'Incomplete Higher', 'Higher Education', 'Academic Degree'], key='education_input')
    housing_type = st.selectbox('Housing Type', ['Municipal apartment', 'Other'], key='housing_input')
    occupation = st.selectbox('Occupation', ['Not Specified', 'Other'], key='occupation_input')
    type_income = st.selectbox('Type Income', ['Working', 'Other'], key='type_income_input')
    property_owner = st.selectbox('Property Owner', ['Yes', 'No'], key='property_owner_input')

    # Convert categorical input to numerical values
    gender_mapping = {'Male': 0, 'Female': 1}
    gender_encoded = gender_mapping[gender]

    education_mapping = {'Lower Secondary': 0, 'Secondary / Secondary Special': 1, 'Incomplete Higher': 2, 'Higher Education': 3, 'Academic Degree': 4}
    education_encoded = education_mapping[education]

    car_owner_encoded = 1 if car_owner == 'Yes' else 0
    work_phone_encoded = 1 if work_phone == 'Yes' else 0
    phone_encoded = 1 if phone == 'Yes' else 0
    housing_type_encoded = 1 if housing_type == 'Municipal apartment' else 0
    occupation_encoded = 1 if occupation == 'Not Specified' else 0
    type_income_encoded = 1 if type_income == 'Working' else 0
    property_owner_encoded = 1 if property_owner == 'Yes' else 0

    # Convert input data to DataFrame
    data = pd.DataFrame({
        'GENDER_M': [gender_encoded],
        'Car_Owner_Y': [car_owner_encoded],
        'Work_Phone': [work_phone_encoded],
        'Phone': [phone_encoded],
        'Family_Members': [family_members],
        'Age': [age],
        'Experience': [experience],
        'Education_Encoded': [education_encoded],
        'Type_Occupation_Not Specified': [occupation_encoded],
        'Type_Income_Working': [type_income_encoded],
        'Annual_income': [annual_income],
        'Housing_type_Municipal apartment': [housing_type_encoded],
        'Propert_Owner_Y': [property_owner_encoded]
    })

    # Make prediction when user clicks the 'Predict' button
    if st.button('Predict'):
        prediction = rf_model.predict(data)
        if prediction[0] == 0:
            st.error('Application Rejected')
        else:
            st.success('Application Approved')

if __name__ == '__main__':
    main()

